<!DOCTYPE html>
<!-- saved from url=(0054)http://divan.github.io/posts/go_concurrency_visualize/ -->
<html lang="en-us" class="gr__divan_github_io"><script async="" src="./Visualizing Concurrency in Go · divan&#39;s blog_files/analytics.js"></script><head prefix="og: http://ogp.me/ns#"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
  <meta property="og:title" content=" Visualizing Concurrency in Go ·  divan&#39;s blog">
  
  <meta property="og:site_name" content="divan&#39;s blog">
  <meta property="og:url" content="https://divan.github.io/posts/go_concurrency_visualize/">
  
  
  <meta property="og:type" content="article">
  
  <meta property="og:article:published_time" content="2016-01-24T18:31:12-03:00">
  
  <meta property="og:article:tag" content="golang">
  
  <meta property="og:article:tag" content="concurrency">
  
  

  <title>
    Golang
  </title>

  <link rel="stylesheet" href="./Visualizing Concurrency in Go · divan&#39;s blog_files/bootstrap.min.css">
  <link rel="stylesheet" href="./Visualizing Concurrency in Go · divan&#39;s blog_files/main.css">
  <link rel="stylesheet" href="./Visualizing Concurrency in Go · divan&#39;s blog_files/highlight.css">
  <link rel="stylesheet" href="./Visualizing Concurrency in Go · divan&#39;s blog_files/animate.css">
  <link rel="stylesheet" href="./Visualizing Concurrency in Go · divan&#39;s blog_files/font-awesome.min.css">
  <link rel="shortcut icon" href="https://divan.github.io/images/favicon.ico">
  <link rel="apple-touch-icon" href="https://divan.github.io/images/apple-touch-icon.png">
  
<script type="text/javascript" async="" src="./Visualizing Concurrency in Go · divan&#39;s blog_files/embed.js"></script><link rel="preload" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.d0448456a5f42b8df8cea2098aa3acf3.css"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.037f55c32651d22255e90738c195e946.js"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.44672f4cc4bed783e5e2f3cb12270277.js"><link rel="preload" as="script" href="https://disqus.com/next/config.js"></head>
<body data-gr-c-s-loaded="true">
    <header class="global-header">
    <section class="header-text">
    
	  
      
  
</div>

      
  
      
      
    </section>
  </header>
  <main class="container">


<article>
  <header>
   
  </header>
  <section>
    

<p>
In this TD, we will rediscover one of the most important functionality of Golang: the goroutines. One of the strongest sides of Go programming language is a built-in concurrency based on the <a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">Tony Hoare&rsquo;s CSP</a>  paper. Go is designed with concurrency in mind and allows us to build complex concurrent pipelines. But have you ever wondered - how various concurrency patterns look like? Since imagining the parallel execution of the function is sometimes difficult to visualise, we will use a <a href="https://github.com/divan/gotrace">visualisation tool</a> to help us understand the execution of goroutines. The main points discussed in this TD are as follows:

</p>
<ul>
<li>Getting familiar with the goroutines.</li>
<li>Using go channels to communicate between different goroutines.</li>
<li>Learning different patterns to be used for parrallel programming using goroutines.</li>

</ul>


<h2>Getting Started</h2>

<p>
Install Go (see the <a href="http://golang.org/doc/install.html">Installation Instructions</a>) if its not install and set all the variables as done in the previous TD (see the <a href="https://moodle.insa-lyon.fr/pluginfile.php/47451/mod_resource/content/2/Autres/go.html#_hello_world">Support (premiere partie)</a>  for more information).
</p>

<pre class="prettyprint">
$ export GOROOT=&lt;path-where-go-is-installed&gt;
$ export PATH=$PATH:$GOROOT/bin

//Set the path of the workspace
$ export GOPATH=&lt;the-work-space-path&gt;
$ export GOBIN=$GOPATH/bin
$ export PATH=$PATH:$GOBIN
</pre>


<p>
Make a new directory for the package wiki:
</p>

<pre class="prettyprint">$ mkdir -p $GOPATH/src/start/goroutines
$ cd ~/goroutines
</pre>

<h3 id="hello-concurrent-world">Hello, Concurrent world</h3>

<p>The code is quite simple - single channel, single goroutine, one write, one read.</p>

<pre><code class="go hljs"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">func</span> main() {
    <span class="hljs-comment">// create new channel of type int</span>
    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>)

    <span class="hljs-comment">// start new anonymous goroutine</span>
    <span class="hljs-keyword">go</span> <span class="hljs-keyword">func</span>() {
        <span class="hljs-comment">// send 42 to channel</span>
        ch &lt;- <span class="hljs-number">42</span>
    }()
    <span class="hljs-comment">// read from channel</span>
    &lt;-ch
}</code></pre>

<p>
<img src="./Visualizing Concurrency in Go · divan&#39;s blog_files/hello.gif" alt="Hello, World"></p>

<p>Here the blue lines represent goroutines running down through time. Thin blue lines connecting ‘main’ and ‘go #19’ are marks for start and stop goroutine, revealing parent-children relation and, finally, red arrow shows us the send/recv action. While it’s actually two separate actions, we try to animate as a single event “send from A to B”. The “#19” in the goroutine name is the actual goroutine internal ID, obtained from runtime with a trick suggested by Scott Mansfield in <a href="http://blog.sgmansfield.com/2015/12/goroutine-ids/">“Goroutine IDs”</a> article.</p>

<h3 id="timers">Timers</h3>

<p>In fact, you can build a simple timer with this approach - create a channel, start goroutine which writes to this channel after given duration and returns this channel to the caller of your func. The caller then blocks on reading from the channel for the exact amount of time. Let’s run such timer 24 times and try to visualize it.</p>

<pre><code class="go hljs"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"time"</span>

<span class="hljs-keyword">func</span> timer(d time.Duration) &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span> {
    c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>)
    <span class="hljs-keyword">go</span> <span class="hljs-keyword">func</span>() {
        time.Sleep(d)
        c &lt;- <span class="hljs-number">1</span>
    }()
    <span class="hljs-keyword">return</span> c
}

<span class="hljs-keyword">func</span> main() {
    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">24</span>; i++ {
        c := timer(<span class="hljs-number">1</span> * time.Second)
        &lt;-c
    }
}</code></pre>

<p>
<img src="./Visualizing Concurrency in Go · divan&#39;s blog_files/timers.gif" alt="Recurrent Timers"></p>

<p>Pretty neat, right? Let’s move on.</p>

<h3 id="ping-pong">Ping-pong</h3>

<p>This nice concurrency example was found in a great talk by googler Sameer Ajmani <a href="https://talks.golang.org/2013/advconc.slide#1">“Advanced Go Concurrency Patterns”</a>. Of course, this pattern isn’t very advanced, but for those who only get themselves familiar with Go concurrency it may look quite fresh and interesting.</p>

<p>Here we have a channel as a table of the ping-pong game. The ball is an integer variable, and two goroutines-players that ‘hit’ the ball, increasing its value (hits counter).</p>

<pre><code class="go hljs"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"time"</span>

<span class="hljs-keyword">func</span> main() {
    <span class="hljs-keyword">var</span> Ball <span class="hljs-typename">int</span>
    table := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>)
    <span class="hljs-keyword">go</span> player(table)
    <span class="hljs-keyword">go</span> player(table)

    table &lt;- Ball
    time.Sleep(<span class="hljs-number">1</span> * time.Second)
    &lt;-table
}

<span class="hljs-keyword">func</span> player(table <span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>) {
    <span class="hljs-keyword">for</span> {
        ball := &lt;-table
        ball++
        time.Sleep(<span class="hljs-number">100</span> * time.Millisecond)
        table &lt;- ball
    }
}</code></pre>

<p>
<img src="./Visualizing Concurrency in Go · divan&#39;s blog_files/pingpong.gif" alt="Ping-Pong">


<p>Now, let’s run three players instead of two.</p>

<pre><code class="go hljs">    <span class="hljs-keyword">go</span> player(table)
    <span class="hljs-keyword">go</span> player(table)
    <span class="hljs-keyword">go</span> player(table)
</code></pre>

<p>
<img src="./Visualizing Concurrency in Go · divan&#39;s blog_files/pingpong3.gif" alt="Ping-Pong 3">
We can see here that each player takes its turn sequentially and you may wonder why is it so. Why we see this strict order in goroutines receiving the ball?</p>

<p>The answer is because Go runtime holds waiting <a href="https://github.com/golang/go/blob/master/src/runtime/chan.go#L34">FIFO queue for receivers</a> (goroutines ready to receive on the particular channel), and in our case every player gets ready just after he passed the ball on the table. Let’s check it with more complex example and run 100 table tennis players.</p>

<pre><code class="go hljs"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++ {
    <span class="hljs-keyword">go</span> player(table)
}</code></pre>

<p>
<img src="./Visualizing Concurrency in Go · divan&#39;s blog_files/pingpong100.gif" alt="Ping-Pong 100">
The FIFO order is now obvious, isn’t it? We can spawn a million goroutines (they’re cheap), but for our goal that would be overkill.
Let’s see something different to play with. For example, common messaging patterns.</p>

<h3 id="fan-in">Fan-In</h3>

<p>One of the popular patterns in the concurrent world is a so called <em>fan-in</em> pattern. It’s the opposite of the <em>fan-out</em> pattern, which we will cover later. To be short, fan-in is a function reading from the multiple inputs and multiplexing all into the single channel.</p>

<p>For example:</p>

<pre><code class="go hljs"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
    <span class="hljs-string">"fmt"</span>
    <span class="hljs-string">"time"</span>
)

<span class="hljs-keyword">func</span> producer(ch <span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>, d time.Duration) {
    <span class="hljs-keyword">var</span> i <span class="hljs-typename">int</span>
    <span class="hljs-keyword">for</span> {
        ch &lt;- i
        i++
        time.Sleep(d)
    }
}

<span class="hljs-keyword">func</span> reader(out <span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>) {
    <span class="hljs-keyword">for</span> x := <span class="hljs-keyword">range</span> out {
        fmt.Println(x)
    }
}

<span class="hljs-keyword">func</span> main() {
    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>)
    out := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>)
    <span class="hljs-keyword">go</span> producer(ch, <span class="hljs-number">100</span>*time.Millisecond)
    <span class="hljs-keyword">go</span> producer(ch, <span class="hljs-number">250</span>*time.Millisecond)
    <span class="hljs-keyword">go</span> reader(out)
    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> ch {
        out &lt;- i
    }
}</code></pre>

<p>
<img src="./Visualizing Concurrency in Go · divan&#39;s blog_files/fanin.gif" alt="Fan-In Pattern">
As we can see, first <em>producer</em> generates values each 100 milliseconds, and second one - each 250 milliseconds, but <em>reader</em> receives values from both producers immediately. Effectively, multiplexing happens in a range loop in <em>main</em>.</p>

<h3 id="workers">Workers</h3>

<p>The opposite pattern to <em>fan-in</em> is a <em>fan-out</em> or <em>workers</em> pattern. Multiple goroutines can read from a single channel, distributing an amount of work between CPU cores, hence the <em>workers</em> name. In Go, this pattern is easy to implement - just start a number of goroutines with channel as parameter, and just send values to that channel - distributing and multiplexing will be done by Go runtime, automagically :)</p>

<pre><code class="go hljs"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
    <span class="hljs-string">"fmt"</span>
    <span class="hljs-string">"sync"</span>
    <span class="hljs-string">"time"</span>
)

<span class="hljs-keyword">func</span> worker(tasksCh &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>, wg *sync.WaitGroup) {
    <span class="hljs-keyword">defer</span> wg.Done()
    <span class="hljs-keyword">for</span> {
        task, ok := &lt;-tasksCh
        <span class="hljs-keyword">if</span> !ok {
            <span class="hljs-keyword">return</span>
        }
        d := time.Duration(task) * time.Millisecond
        time.Sleep(d)
        fmt.Println(<span class="hljs-string">"processing task"</span>, task)
    }
}

<span class="hljs-keyword">func</span> pool(wg *sync.WaitGroup, workers, tasks <span class="hljs-typename">int</span>) {
    tasksCh := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>)

    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; workers; i++ {
        <span class="hljs-keyword">go</span> worker(tasksCh, wg)
    }

    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; tasks; i++ {
        tasksCh &lt;- i
    }

    <span class="hljs-built_in">close</span>(tasksCh)
}

<span class="hljs-keyword">func</span> main() {
    <span class="hljs-keyword">var</span> wg sync.WaitGroup
    wg.Add(<span class="hljs-number">36</span>)
    <span class="hljs-keyword">go</span> pool(&amp;wg, <span class="hljs-number">36</span>, <span class="hljs-number">50</span>)
    wg.Wait()
}</code></pre>

<p>
<img src="./Visualizing Concurrency in Go · divan&#39;s blog_files/workers.gif" alt="Workers">
One thing worth to note here: the parallelism. As you can see, all goroutines ‘run’ in parallel, waiting for channel to give them ‘work’ to do. Given the animation above, it’s easy to spot that goroutines receive their work almost immediately one after another. Unfortunately, this animation doesn’t show in color where goroutine really does work or just waits for input, but this exact animation was recorded with GOMAXPROCS=4, so only 4 goroutines effectively run in parallel. We will get to this subject shortly.</p>

<p>For now, let’s do something more complex, and start workers that have their own workers (subworkers).</p>

<pre><code class="go hljs"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
    <span class="hljs-string">"fmt"</span>
    <span class="hljs-string">"sync"</span>
    <span class="hljs-string">"time"</span>
)

<span class="hljs-keyword">const</span> (
    WORKERS    = <span class="hljs-number">5</span>
    SUBWORKERS = <span class="hljs-number">3</span>
    TASKS      = <span class="hljs-number">20</span>
    SUBTASKS   = <span class="hljs-number">10</span>
)

<span class="hljs-keyword">func</span> subworker(subtasks <span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>) {
    <span class="hljs-keyword">for</span> {
        task, ok := &lt;-subtasks
        <span class="hljs-keyword">if</span> !ok {
            <span class="hljs-keyword">return</span>
        }
        time.Sleep(time.Duration(task) * time.Millisecond)
        fmt.Println(task)
    }
}

<span class="hljs-keyword">func</span> worker(tasks &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>, wg *sync.WaitGroup) {
    <span class="hljs-keyword">defer</span> wg.Done()
    <span class="hljs-keyword">for</span> {
        task, ok := &lt;-tasks
        <span class="hljs-keyword">if</span> !ok {
            <span class="hljs-keyword">return</span>
        }

        subtasks := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>)
        <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; SUBWORKERS; i++ {
            <span class="hljs-keyword">go</span> subworker(subtasks)
        }
        <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; SUBTASKS; i++ {
            task1 := task * i
            subtasks &lt;- task1
        }
        <span class="hljs-built_in">close</span>(subtasks)
    }
}

<span class="hljs-keyword">func</span> main() {
    <span class="hljs-keyword">var</span> wg sync.WaitGroup
    wg.Add(WORKERS)
    tasks := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>)

    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; WORKERS; i++ {
        <span class="hljs-keyword">go</span> worker(tasks, &amp;wg)
    }

    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; TASKS; i++ {
        tasks &lt;- i
    }

    <span class="hljs-built_in">close</span>(tasks)
    wg.Wait()
}</code></pre>

<p>
<img src="./Visualizing Concurrency in Go · divan&#39;s blog_files/workers2.gif" alt="Workers of workers">
Nice. Of course, we can set number of workers and subworkers to much higher values, but I tried to make animations clear and understandable.</p>

<p>There are even cooler fan-out patterns do exist, like the dynamic amount of workers/subworkers, with sending channels over channels, but the idea of fan-out should be clear for now.</p>

<h3 id="servers">Servers</h3>

<p>Next common pattern is similar to fan-out, but with goroutines spawned for the short period of time, just to accomplish some task. It’s typically used for implementing servers - create a listener, run accept() in a loop and start goroutine for each accepted connection. It’s very expressive and allows to implement server handlers as simple as possible. Take a look at this simple example:</p>

<pre><code class="go hljs"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"net"</span>

<span class="hljs-keyword">func</span> handler(c net.Conn) {
    c.Write([]<span class="hljs-typename">byte</span>(<span class="hljs-string">"ok"</span>))
    c.Close()
}

<span class="hljs-keyword">func</span> main() {
    l, err := net.Listen(<span class="hljs-string">"tcp"</span>, <span class="hljs-string">":5000"</span>)
    <span class="hljs-keyword">if</span> err != <span class="hljs-constant">nil</span> {
        <span class="hljs-built_in">panic</span>(err)
    }
    <span class="hljs-keyword">for</span> {
        c, err := l.Accept()
        <span class="hljs-keyword">if</span> err != <span class="hljs-constant">nil</span> {
            <span class="hljs-keyword">continue</span>
        }
        <span class="hljs-keyword">go</span> handler(c)
    }
}</code></pre>

<p>
<img src="./Visualizing Concurrency in Go · divan&#39;s blog_files/servers.gif" alt="Servers">
It’s not very interesting - it seems there is nothing happens in terms of concurrency. Of course, under the hood there is a ton of complexity, which is deliberately hidden from us. <a href="https://www.youtube.com/watch?v=rFejpH_tAHM">“Simplicity is complicated”</a>.</p>

<p>But let’s go back to concurrency and add some interaction to our server. Let’s say, each handler wants to write asynchronously to the logger. Logger itself, in our example, is a separate goroutine which does the job.</p>

<pre><code class="go hljs"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
    <span class="hljs-string">"fmt"</span>
    <span class="hljs-string">"net"</span>
    <span class="hljs-string">"time"</span>
)

<span class="hljs-keyword">func</span> handler(c net.Conn, ch <span class="hljs-keyword">chan</span> <span class="hljs-typename">string</span>) {
    ch &lt;- c.RemoteAddr().String()
    c.Write([]<span class="hljs-typename">byte</span>(<span class="hljs-string">"ok"</span>))
    c.Close()
}

<span class="hljs-keyword">func</span> logger(ch <span class="hljs-keyword">chan</span> <span class="hljs-typename">string</span>) {
    <span class="hljs-keyword">for</span> {
        fmt.Println(&lt;-ch)
    }
}

<span class="hljs-keyword">func</span> server(l net.Listener, ch <span class="hljs-keyword">chan</span> <span class="hljs-typename">string</span>) {
    <span class="hljs-keyword">for</span> {
        c, err := l.Accept()
        <span class="hljs-keyword">if</span> err != <span class="hljs-constant">nil</span> {
            <span class="hljs-keyword">continue</span>
        }
        <span class="hljs-keyword">go</span> handler(c, ch)
    }
}

<span class="hljs-keyword">func</span> main() {
    l, err := net.Listen(<span class="hljs-string">"tcp"</span>, <span class="hljs-string">":5000"</span>)
    <span class="hljs-keyword">if</span> err != <span class="hljs-constant">nil</span> {
        <span class="hljs-built_in">panic</span>(err)
    }
    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-typename">string</span>)
    <span class="hljs-keyword">go</span> logger(ch)
    <span class="hljs-keyword">go</span> server(l, ch)
    time.Sleep(<span class="hljs-number">10</span> * time.Second)
}</code></pre>

<p>
<img src="./Visualizing Concurrency in Go · divan&#39;s blog_files/servers2.gif" alt="Servers 2">
Quite demonstrative, isn’t it? But it’s easy to see that our <em>logger</em> goroutine can quickly become a bottleneck if the number of requests increase and logging action take some time (preparing and encoding data, for example). We can use an already known fan-out pattern. Let’s do it.</p>

<h3 id="server-worker">Server + Worker</h3>

<p>Server with worker example is a bit advanced version of the logger. It not only does some work but sends the result of its work back to the pool using <em>results</em> channel. Not a big deal, but it extends our logger example to something more practical.</p>

<p>Let’s see the code and animation:</p>

<pre><code class="go hljs"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
    <span class="hljs-string">"net"</span>
    <span class="hljs-string">"time"</span>
)

<span class="hljs-keyword">func</span> handler(c net.Conn, ch <span class="hljs-keyword">chan</span> <span class="hljs-typename">string</span>) {
    addr := c.RemoteAddr().String()
    ch &lt;- addr
    time.Sleep(<span class="hljs-number">100</span> * time.Millisecond)
    c.Write([]<span class="hljs-typename">byte</span>(<span class="hljs-string">"ok"</span>))
    c.Close()
}

<span class="hljs-keyword">func</span> logger(wch <span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>, results <span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>) {
    <span class="hljs-keyword">for</span> {
        data := &lt;-wch
        data++
        results &lt;- data
    }
}

<span class="hljs-keyword">func</span> parse(results <span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>) {
    <span class="hljs-keyword">for</span> {
        &lt;-results
    }
}

<span class="hljs-keyword">func</span> pool(ch <span class="hljs-keyword">chan</span> <span class="hljs-typename">string</span>, n <span class="hljs-typename">int</span>) {
    wch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>)
    results := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>)
    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ {
        <span class="hljs-keyword">go</span> logger(wch, results)
    }
    <span class="hljs-keyword">go</span> parse(results)
    <span class="hljs-keyword">for</span> {
        addr := &lt;-ch
        l := <span class="hljs-built_in">len</span>(addr)
        wch &lt;- l
    }
}

<span class="hljs-keyword">func</span> server(l net.Listener, ch <span class="hljs-keyword">chan</span> <span class="hljs-typename">string</span>) {
    <span class="hljs-keyword">for</span> {
        c, err := l.Accept()
        <span class="hljs-keyword">if</span> err != <span class="hljs-constant">nil</span> {
            <span class="hljs-keyword">continue</span>
        }
        <span class="hljs-keyword">go</span> handler(c, ch)
    }
}

<span class="hljs-keyword">func</span> main() {
    l, err := net.Listen(<span class="hljs-string">"tcp"</span>, <span class="hljs-string">":5000"</span>)
    <span class="hljs-keyword">if</span> err != <span class="hljs-constant">nil</span> {
        <span class="hljs-built_in">panic</span>(err)
    }
    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-typename">string</span>)
    <span class="hljs-keyword">go</span> pool(ch, <span class="hljs-number">4</span>)
    <span class="hljs-keyword">go</span> server(l, ch)
    time.Sleep(<span class="hljs-number">10</span> * time.Second)
}</code></pre>

<p>
<img src="./Visualizing Concurrency in Go · divan&#39;s blog_files/servers3.gif" alt="Server + Worker">
We distributed work between 4 goroutines, effectively improving the throughput of the logger, but from this animation, we can see that logger still may be the source of problems. Thousands of connections converge in a single channel before being distributed and it may result in a logger being bottleneck again. But, of course, it will happen on much higher loads.</p>

<h3 id="concurrent-prime-sieve">Concurrent Prime Sieve</h3>

<p>Enough fan-in/fan-out fun. Let’s see more sophisticated concurrency algorithms. One of my favorite examples is a Concurrent Prime Sieve, found in <a href="https://talks.golang.org/2012/concurrency.slide">“Go Concurrency Patterns”</a> talk. Prime Sieve, or <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of Eratosthenes</a> is an ancient algorithm for finding prime number up to the given limit. It works by eliminating multiples of all primes in a sequential manner. Naive algorithm is not really efficient, especially on multicore machines.</p>

<p>The concurrent variant of this algorithm uses goroutines for filtering numbers - one goroutine per every prime discovered, and channels for sending numbers from the generator to filters. When prime is found, it’s being sent via the channel to the <em>main</em> for output. Of course, this algorithm is also not very efficient, especially if you want to find large primes and look for the lowest Big O complexity, but I find it extremely elegant.</p>

<pre><code class="go hljs"><span class="hljs-comment">// A concurrent prime sieve</span>
<span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>

<span class="hljs-comment">// Send the sequence 2, 3, 4, ... to channel 'ch'.</span>
<span class="hljs-keyword">func</span> Generate(ch <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-typename">int</span>) {
    <span class="hljs-keyword">for</span> i := <span class="hljs-number">2</span>; ; i++ {
        ch &lt;- i <span class="hljs-comment">// Send 'i' to channel 'ch'.</span>
    }
}

<span class="hljs-comment">// Copy the values from channel 'in' to channel 'out',</span>
<span class="hljs-comment">// removing those divisible by 'prime'.</span>
<span class="hljs-keyword">func</span> Filter(in &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>, out <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-typename">int</span>, prime <span class="hljs-typename">int</span>) {
    <span class="hljs-keyword">for</span> {
        i := &lt;-in <span class="hljs-comment">// Receive value from 'in'.</span>
        <span class="hljs-keyword">if</span> i%prime != <span class="hljs-number">0</span> {
            out &lt;- i <span class="hljs-comment">// Send 'i' to 'out'.</span>
        }
    }
}

<span class="hljs-comment">// The prime sieve: Daisy-chain Filter processes.</span>
<span class="hljs-keyword">func</span> main() {
    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>) <span class="hljs-comment">// Create a new channel.</span>
    <span class="hljs-keyword">go</span> Generate(ch)      <span class="hljs-comment">// Launch Generate goroutine.</span>
    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ {
        prime := &lt;-ch
        fmt.Println(prime)
        ch1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-typename">int</span>)
        <span class="hljs-keyword">go</span> Filter(ch, ch1, prime)
        ch = ch1
    }
}</code></pre>

<p>
<img src="./Visualizing Concurrency in Go · divan&#39;s blog_files/primesieve.gif" alt="PrimeSieve">
Feel free to play with this animation in interactive mode. we like how illustrative it is - it really can help understand this algorithm better. The <em>generate</em> goroutine emits every integer number, starting from 2, and each new goroutine filters out only specific prime multiples - 2, 3, 5, 7…, sending first found prime to <em>main</em>. If you rotate it to see from the top, you’ll see all numbers being sent from goroutines to main are prime numbers. Beautiful algorithm, especially in 3D.</p>

<h3 id="gomaxprocs">GOMAXPROCS</h3>

<p>Now, let’s go back to our workers example. Remember, I told that it was run with GOMAXPROCS=4? That’s because all these animations are not art work, they are real traces of real programs.</p>

<p>Let’s refresh our memory on what <a href="https://golang.org/pkg/runtime/#GOMAXPROCS">GOMAXPROCS</a> is.</p>

<blockquote>
<p>GOMAXPROCS sets the maximum number of CPUs that can be executing simultaneously.</p>
</blockquote>

<p>CPU means logical CPU, of course. we modified workers example a bit to make a real work (not just sleep) and use real CPU time. Then I ran the code without any modification except setting different GOMAXPROCS value. The Linux box had 2 CPUs with 12 cores each, resulting in 24 cores.</p>

<p>So, the first run demonstrates the program running on 1 core, and second - using the power of all 24 cores availiable.</p>

<p> <img src="./Visualizing Concurrency in Go · divan&#39;s blog_files/gomaxprocs24.gif" alt="GOMAXPROCS24">
The time speed in these animations are different (we wanted all animations to fit the same time/height), so the difference is obvious. With GOMAXPROCS=1, next worker start real work only after previous has finish it’s work. With GOMAXPROCS=24 the speedup is huge, and overhead for multiplexing is negligible.</p>

<p>It’s important to understand, though, that increasing GOMAXPROCS not always boosts performance, and there cases when it actually makes it worse.</p>

<h3 id="goroutines-leak">Goroutines leak</h3>

<p>What else we can demonstrate from concurrent things in Go? The one thing that comes to my mind is a goroutines leak. A leak can happen, for example, if you <a href="http://openmymind.net/Leaking-Goroutines/">start goroutine but it falls out of scope</a>. Or you simply forget to add finish condition, and run a for {} loop.</p>



<p>Take a look:</p>

<p>
<img src="./Visualizing Concurrency in Go · divan&#39;s blog_files/leak.gif" alt="Leak">
</p>



  </footer>

  <script src="./Visualizing Concurrency in Go · divan&#39;s blog_files/highlight.pack.js"></script>
  <script>hljs.initHighlightingOnLoad();</script>
  
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-70805978-1', 'auto');
    ga('send', 'pageview');
  </script>
  
  



<iframe style="display: none;" src="./Visualizing Concurrency in Go · divan&#39;s blog_files/saved_resource(1).html"></iframe></body></html>